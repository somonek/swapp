// define namespacing
window.App = App = {
    Modules: {
        Config: {}
    }
};


App.Modules.Config = {
    apiRootUrl: "http://swapi.co/api"
};

App.Modules.Cache = {
    lastFetchedPersonId: null
};

App.Modules.Helpers = {
    getIdFromUrl: ( url ) => {
       return parseInt( url.match(/(\d)/g).join('') );
    },

    ContentContainer:{
        $el: () => { return $("#swappContent") },
        toggle(){
            this.$el().attr("data-state") === "in" ? this.slide("out") : this.slide("in");
        },
        slide( direction, speed = 300 ){
            var $col = this.$el();
            var width = $col.outerWidth();
            var left1;

            switch( direction ){
                case "in":
                    right = -width;
                    break;
                case "out":
                    right = 0;
            }
            $col.animate({
                right: right
            }, speed);

            $col.attr("data-state", direction);
        }
    }
};


modulejs.define( "app/views/homeworld_fellows", () => {

    let rowView = Backbone.Marionette.ItemView.extend({
        template: templates.get("homeworld_fellow_item.ejs"),
        className: "chip",

        initialize(){
            this.model.set("name", "loading...");
            this.model.fetch().then(() => {
                this.render();
            });
        }
    });
    
    return Backbone.Marionette.CompositeView.extend({
        template: _.template(`
            <div class="divider margin-top-20"></div>
            <p><b>Other people from the same homeworld:</b></p>
            <div></div>
        `),
        childView: rowView,
        itemViewContainer: "div",
        
        events: {
            "click a.p-name": "personClick"
        },

        personClick( e ){
            e.preventDefault();
        },

        onShow(){
            if( this.collection.length === 0 ){
                this.$el.html("<p>This guy is the only one in this homeworld!</p>");
            }
        }
    });
});
modulejs.define( "app/views/loader", () => {

    return Backbone.Marionette.ItemView.extend({
        template: templates.get("loader.ejs"),
        className: "center-align"
    });
});
modulejs.define( "app/views/pagination",
    [
        'app/views/loader'
    ],
    ( LoaderView ) => {

       return Backbone.Marionette.ItemView.extend({
           template: templates.get("pagination.ejs"),
           tagName: "ul",
           className: "pagination center-align",

           events: {
               "click .previous": "getPreviousPage",
               "click .next": "getNextPage"
           },

           initialize(){
               this.model = new Backbone.Model();
               this.setButtonsClass();
           },

           getPreviousPage(){
               this.renderLoader();
               let prevPage = this.getPageNumberHelper( this.collection.meta.previous );
               this.collection.fetch( {reset: true, data:  $.param({ page: prevPage}) } ).done(() => {
                   this.collection.trigger('page:change');
                   this.setButtonsClass();
                   this.render();
               });
           },

           setButtonsClass(){
               this.model.set("prev_class", this.getButtonClassHelper( this.collection.meta.previous ));
               this.model.set("next_class", this.getButtonClassHelper( this.collection.meta.next ));
           },

           getNextPage(){
               this.renderLoader();
               let nextPage = this.getPageNumberHelper( this.collection.meta.next );
               this.collection.fetch( {reset: true, data:  $.param({ page: nextPage}) } ).done(() => {
                   this.collection.trigger('page:change');
                   this.setButtonsClass();
                   this.render();
               });
           },

           getPageNumberHelper( url ){
               // bad practice but works for this particular case
               return url.substr( url.length - 1 );
           },

           getButtonClassHelper( url ){
               return _.isNull( url ) ? "disabled" : "waves-effect"
           },

           renderLoader(){
               let loaderView = new LoaderView();
               this.$el.html( loaderView.render().el );
           }
       });
    });
modulejs.define( "app/views/person_data",
    [
        'app/models/planet',
        'app/models/person',
        'app/collections/people',
        'app/views/homeworld_fellows'
    ],
    (
        PlanetModel,
        PersonModel,
        PeopleCollection,
        HomeworldFellowsView
    ) => {

        var rowView = Backbone.Marionette.LayoutView.extend({
            template: _.template(`
                <td><b><%= key %></b></td>
                <td class="value"><%= value %></td>
            `),
            tagName: "tr",
            regions: {
                value: ".value"
            },
            onShow(){
                if( this.model.get("value") instanceof Backbone.View ){
                    this.getRegion("value").show( this.model.get("value") );
                }
            }

        });

        var homeworldView = Backbone.Marionette.ItemView.extend({
            initialize(){
                this.template = _.template(`
                    <b class="teal-color"><%= name %></b>
                `);

                this.model.fetch().then(()=>{
                    this.render();
                });
            }
        });

        var dataView = Backbone.Marionette.CompositeView.extend({
            template: _.template("<tbody></tbody>"),
            itemViewContainer: "tbody",
            tagName: "table",
            className: "striped",
            childView: rowView,

            initialize(){
                var _this = this;
                let personDataCollection = new Backbone.Collection();
                let dataForTable = _.omit( this.model.attributes, [
                    'id',
                    'created',
                    'edited',
                    'films',
                    'species',
                    'vehicles',
                    'starships',
                    'url'
                ]);

                $.each( dataForTable, (key, value) => {
                    if( key === "homeworld" ){
                        let homeworldId = window.App.Modules.Helpers.getIdFromUrl( value );
                        let homeworldModel = new PlanetModel({id: homeworldId});
                        value = new homeworldView({
                            model: homeworldModel
                        })
                    }
                    personDataCollection.add({
                        key: _this.cleanKeyHelper( key ),
                        value: value
                    });
                });

                this.collection = personDataCollection;
            },

            cleanKeyHelper( key ){
                return ( key.charAt(0).toUpperCase() + key.slice(1) ).replace("_", " ");
            }
        });

        return Backbone.Marionette.LayoutView.extend({
            template: _.template(`
                <div class="close-btn right">&#10005</div>
                <div id="dataTable"></div>
                <div id="homeworldResidents"></div>
            `),
            events:{
                "click .close-btn": "closeContainer"
            },
            regions: {
                "data": "#dataTable",
                "fellows": "#homeworldResidents"
            },

            onShow(){
                this.renderPersonData();
                this.renderHomeplanetResidents();
            },

            renderPersonData(){
                this.getRegion("data").show( new dataView( {model: this.model} ));
            },

            getHomeplanetData(){
                let homeworldId = window.App.Modules.Helpers.getIdFromUrl( this.model.get("homeworld") );
                let Planet = new PlanetModel({id: homeworldId});
                return Planet.fetch();
            },

            renderHomeplanetResidents(){
                this.getHomeplanetData().then((Planet) => {
                    let residents = this.cleanResidentsArrayHelper( Planet.residents );
                    let homeWorldFellowsCollection = new PeopleCollection( residents );

                    //remove current showing person from "other people from same homeworld"
                    homeWorldFellowsCollection.remove( homeWorldFellowsCollection.where( {id: this.model.get("id")} ) );

                    let homeWorldView = new HomeworldFellowsView({
                        collection: homeWorldFellowsCollection
                    });

                    this.getRegion("fellows").show( homeWorldView );
                });
            },

            cleanResidentsArrayHelper( residents ){
                return _.map( residents, ( url )=>{
                    let personId = window.App.Modules.Helpers.getIdFromUrl( url );
                    return new PersonModel({id: personId});
                });
            },

            closeContainer(){
                window.App.Modules.Helpers.ContentContainer.slide("in")
            }
        });
    });
modulejs.define( "app/views/results",
    [
        'app/models/person'
    ],
    (
        PersonModel
    ) => {
        
        var rowView = Backbone.Marionette.ItemView.extend({
            template: false,
            tagName: "a",
            className: "collection-item",
            events: {
                "click": "itemClick"
            },

            initialize(){
                this.$el
                    .html( this.model.get("name") )
                    .prop( "href", "#" )
                    .attr( "data-id", this.model.get("id") );
            },

            itemClick(e){
                let $item = $(e.target);
                window.App.Modules.Helpers.ContentContainer.slide("out")
                this.seePersonDetails( $item );
                this.makeItemActive( $item );
                e.preventDefault();
            },

            seePersonDetails( $item ){
                let itemId = $item.attr("data-id");
                let Person = new PersonModel( {id: itemId} );

                if( window.App.Modules.Cache.lastFetchedPersonId === itemId ) return;
                window.App.Modules.Cache.lastFetchedPersonId = itemId;

                Backbone.Events.trigger( "person:data:before:fetch" );
                Person.fetch().then( () => {
                    Backbone.Events.trigger( "person:data:fetch", Person );
                });
            },

            makeItemActive( $item ){
                $(".collection .collection-item").removeClass("active");
                $item.addClass("active");
            }
        });

        return Backgrid.Grid.extend({
            columns: [{
                name: "name",
                label: "Name",
                cell: rowView
            }],
            className: "backgrid collection"
        });
    });
modulejs.define("app/views/search_filter", () => {

    return Backgrid.Extension.ClientSideFilter.extend({
        template: templates.get("search_filter.ejs"),
        className: "",

        // after clearing the searchbox, unfocus the field as well
        clearSearchBox(){
            Backgrid.Extension.ClientSideFilter.prototype.clearSearchBox.call(this);
            this.searchBox().focusout();
            this.trigger("results:yes");
        },

        search() {
            Backgrid.Extension.ClientSideFilter.prototype.search.call(this);
            let eventToTrigger = this.collection.length === 0 ? "results:no" : "results:yes";
            this.trigger( eventToTrigger );
        }
    });

});
modulejs.define( "app/models/person", () => {

    var apiRootUrl = window.App.Modules.Config.apiRootUrl;
    return Backbone.Model.extend({
        urlRoot: apiRootUrl + "/people",
        
        parse: function(resp, options) {
            resp.id = window.App.Modules.Helpers.getIdFromUrl( resp.url );
            return resp;
        }
    });

});
modulejs.define( "app/models/planet", () => {

    var apiRootUrl = window.App.Modules.Config.apiRootUrl;
    return Backbone.Model.extend({
        urlRoot: apiRootUrl + "/planets"
    });

});
modulejs.define( "app/collections/people",
    [
        "app/models/person"
    ],
    ( PersonModel ) => {

        var apiRootUrl = window.App.Modules.Config.apiRootUrl;
         return Backbone.Collection.extend({
             url: () => { return apiRootUrl + "/people" },
             model: PersonModel,

             parse: function(resp, options) {
                 this.meta = _.omit( resp, 'results');
                 return resp.results;
             }
         });

    });
modulejs.define( "app/collections/planets",
    [
        "app/models/planet"
    ],
    ( PlanetModel ) => {

        var apiRootUrl = window.App.Modules.Config.apiRootUrl;
        return Backbone.Collection.extend({
            url: () => { return apiRootUrl + "/planets" },
            model: PlanetModel,

            parse: function(resp, options) {
                this.meta = _.omit( resp, 'results' );
                return resp.results;
            }
        });

    });

var swapp = Backbone.Marionette.Application.extend({
    regions: {
        results: "#results",
        filters: "#filters",
        content: "#swappContent",
        paginator: "#paginator"
    }
});

var controller = Backbone.Marionette.Object.extend({
    loaderView: modulejs.require('app/views/loader'),

    initialize(){
        let peopleCollection = modulejs.require("app/collections/people");
        this.peopleCollection = new peopleCollection();
        this.bindEvents()
    },

    bindEvents(){
        Backbone.Events.on("person:data:before:fetch", () => {
            Swapp.getRegion("content").show( new this.loaderView() );
        });
    },

    bindResultsViewEvents(){
        var _this = this;
        Backbone.Events.on("person:data:fetch", ( PersonModel ) => {
            let PersonDataView = modulejs.require("app/views/person_data");
            Swapp.getRegion("content").show( new PersonDataView( {model: PersonModel} ));
        });

        this.peopleCollection.on("page:change", () => {
            _this.SearchFilterView.clearSearchBox();
        });

        this.SearchFilterView.on("results:no", ()=>{
            this.Paginator.$el.hide();
            this.ResultsView.$el.find('thead').hide();
        });

        this.SearchFilterView.on("results:yes", ()=>{
            this.Paginator.$el.show();
            this.ResultsView.$el.find('thead').show();
        });
    },

    renderResultsLoader(){
        // this stuff could go in the initialize method of the view itself, but it takes too long to get there and the loader is visible only for few milliseconds
        Swapp.getRegion("results").show( new this.loaderView() );
    },

    renderResults(){
        this.peopleCollection.fetch().then( () => {
            let resultsView = modulejs.require("app/views/results");
            this.ResultsView = new resultsView({
                collection: this.peopleCollection,
                emptyText: "No results found..."
            });
            Swapp.getRegion("results").show( this.ResultsView );
            this.renderPaginator();
            this.bindResultsViewEvents();
        });
    },

    renderFilters(){
        let searchFilter = modulejs.require("app/views/search_filter");
        this.SearchFilterView = new searchFilter({
            collection: this.peopleCollection
        });
        Swapp.getRegion("filters").show( this.SearchFilterView );
    },

    renderPaginator(){
        let paginator = modulejs.require("app/views/pagination");
        this.Paginator = new paginator({
            collection: this.peopleCollection
        });
        Swapp.getRegion('paginator').show( this.Paginator );
    }
});


Swapp = new swapp();
Controller = new controller();

Swapp.addInitializer( () => {
    Controller.renderResultsLoader();
    Controller.renderResults();
    Controller.renderFilters();
});

Swapp.start();

$(document).ready( function() {
    $('select').material_select();
});