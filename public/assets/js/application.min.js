"use strict";

// define namespacing
var App = {
    Modules: {
        Config: {}
    }
};

App.Modules.Config = {
    apiRootUrl: "http://swapi.co/api"
};

App.Modules.Cache = {
    lastFetchedPersonId: null
};

App.Modules.Helpers = {
    getIdFromUrl: function getIdFromUrl(url) {
        return parseInt(url.match(/(\d)/g).join(''));
    },

    ContentContainer: {
        $el: function $el() {
            return $("#swappContent");
        },
        toggle: function toggle() {
            this.$el().attr("data-state") === "in" ? this.slide("out") : this.slide("in");
        },
        slide: function slide(direction) {
            var speed = arguments.length <= 1 || arguments[1] === undefined ? 300 : arguments[1];

            var $col = this.$el();
            var width = $col.outerWidth();
            var right;

            switch (direction) {
                case "in":
                    right = -width;
                    break;
                case "out":
                    right = 0;
            }
            $col.animate({
                right: right
            }, speed);

            $col.attr("data-state", direction);
        }
    }
};

window.App = App;

modulejs.define("app/views/homeworld_fellows", function () {

    var rowView = Backbone.Marionette.ItemView.extend({
        template: templates.get("homeworld_fellow_item.ejs"),
        className: "chip",

        initialize: function initialize() {
            var _this2 = this;

            this.model.set("name", "loading...");
            this.model.fetch().then(function () {
                _this2.render();
            });
        }
    });

    return Backbone.Marionette.CompositeView.extend({
        template: _.template("\n            <div class=\"divider margin-top-20\"></div>\n            <p><b>Other people from the same homeworld:</b></p>\n            <div></div>\n        "),
        childView: rowView,
        itemViewContainer: "div",

        events: {
            "click a.p-name": "personClick"
        },

        personClick: function personClick(e) {
            e.preventDefault();
        },
        onShow: function onShow() {
            if (this.collection.length === 0) {
                this.$el.html("<p>This guy is the only one in this homeworld!</p>");
            }
        }
    });
});
modulejs.define("app/views/loader", function () {

    return Backbone.Marionette.ItemView.extend({
        template: templates.get("loader.ejs"),
        className: "center-align"
    });
});
modulejs.define("app/views/pagination", ['app/views/loader'], function (LoaderView) {

    return Backbone.Marionette.ItemView.extend({
        template: templates.get("pagination.ejs"),
        tagName: "ul",
        className: "pagination center-align",

        events: {
            "click .previous": "getPreviousPage",
            "click .next": "getNextPage"
        },

        initialize: function initialize() {
            this.model = new Backbone.Model();
            this.setButtonsClass();
        },
        getPreviousPage: function getPreviousPage(e) {
            var _this3 = this;

            e.preventDefault();
            this.renderLoader();
            var prevPage = this.getPageNumberHelper(this.collection.meta.previous);
            this.collection.fetch({ reset: true, data: $.param({ page: prevPage }) }).done(function () {
                _this3.collection.trigger('page:change');
                _this3.setButtonsClass();
                _this3.render();
            });
        },
        setButtonsClass: function setButtonsClass() {
            this.model.set("prev_class", this.getButtonClassHelper(this.collection.meta.previous));
            this.model.set("next_class", this.getButtonClassHelper(this.collection.meta.next));
        },
        getNextPage: function getNextPage(e) {
            var _this4 = this;

            e.preventDefault();
            this.renderLoader();
            var nextPage = this.getPageNumberHelper(this.collection.meta.next);
            this.collection.fetch({ reset: true, data: $.param({ page: nextPage }) }).done(function () {
                _this4.collection.trigger('page:change');
                _this4.setButtonsClass();
                _this4.render();
            });
        },
        getPageNumberHelper: function getPageNumberHelper(url) {
            // bad code but works for this particular case
            return url.substr(url.length - 1);
        },
        getButtonClassHelper: function getButtonClassHelper(url) {
            return _.isNull(url) ? "disabled" : "waves-effect";
        },
        renderLoader: function renderLoader() {
            var loaderView = new LoaderView();
            this.$el.html(loaderView.render().el);
        }
    });
});
modulejs.define("app/views/person_data", ['app/models/planet', 'app/models/person', 'app/collections/people', 'app/views/homeworld_fellows'], function (PlanetModel, PersonModel, PeopleCollection, HomeworldFellowsView) {

    var rowView = Backbone.Marionette.LayoutView.extend({
        template: _.template("\n                <td><b><%= key %></b></td>\n                <td class=\"value\"><%= value %></td>\n            "),
        tagName: "tr",
        regions: {
            value: ".value"
        },
        onShow: function onShow() {
            if (this.model.get("value") instanceof Backbone.View) {
                this.getRegion("value").show(this.model.get("value"));
            }
        }
    });

    var homeworldView = Backbone.Marionette.ItemView.extend({
        initialize: function initialize() {
            var _this5 = this;

            this.template = _.template("\n                    <b class=\"teal-color\"><%= name %></b>\n                ");

            this.model.fetch().then(function () {
                _this5.render();
            });
        }
    });

    var dataView = Backbone.Marionette.CompositeView.extend({
        template: _.template("<tbody></tbody>"),
        itemViewContainer: "tbody",
        tagName: "table",
        className: "striped",
        childView: rowView,

        initialize: function initialize() {
            var _this = this;
            var personDataCollection = new Backbone.Collection();
            var dataForTable = _.omit(this.model.attributes, ['id', 'created', 'edited', 'films', 'species', 'vehicles', 'starships', 'url']);

            $.each(dataForTable, function (key, value) {
                if (key === "homeworld") {
                    var homeworldId = window.App.Modules.Helpers.getIdFromUrl(value);
                    var homeworldModel = new PlanetModel({ id: homeworldId });
                    value = new homeworldView({
                        model: homeworldModel
                    });
                }
                personDataCollection.add({
                    key: _this.cleanKeyHelper(key),
                    value: value
                });
            });

            this.collection = personDataCollection;
        },
        cleanKeyHelper: function cleanKeyHelper(key) {
            return (key.charAt(0).toUpperCase() + key.slice(1)).replace("_", " ");
        }
    });

    return Backbone.Marionette.LayoutView.extend({
        template: _.template("\n                <div class=\"close-btn right\">&#10005</div>\n                <div id=\"dataTable\"></div>\n                <div id=\"homeworldResidents\"></div>\n            "),
        events: {
            "click .close-btn": "closeContainer"
        },
        regions: {
            "data": "#dataTable",
            "fellows": "#homeworldResidents"
        },

        onShow: function onShow() {
            this.renderPersonData();
            this.renderHomeplanetResidents();
        },
        renderPersonData: function renderPersonData() {
            this.getRegion("data").show(new dataView({ model: this.model }));
        },
        getHomeplanetData: function getHomeplanetData() {
            var homeworldId = window.App.Modules.Helpers.getIdFromUrl(this.model.get("homeworld"));
            var Planet = new PlanetModel({ id: homeworldId });
            return Planet.fetch();
        },
        renderHomeplanetResidents: function renderHomeplanetResidents() {
            var _this6 = this;

            this.getHomeplanetData().then(function (Planet) {
                var residents = _this6.cleanResidentsArrayHelper(Planet.residents);
                var homeWorldFellowsCollection = new PeopleCollection(residents);

                //remove current showing person from "other people from same homeworld"
                homeWorldFellowsCollection.remove(homeWorldFellowsCollection.where({ id: _this6.model.get("id") }));

                var homeWorldView = new HomeworldFellowsView({
                    collection: homeWorldFellowsCollection
                });

                _this6.getRegion("fellows").show(homeWorldView);
            });
        },
        cleanResidentsArrayHelper: function cleanResidentsArrayHelper(residents) {
            return _.map(residents, function (url) {
                var personId = window.App.Modules.Helpers.getIdFromUrl(url);
                return new PersonModel({ id: personId });
            });
        },
        closeContainer: function closeContainer() {
            window.App.Modules.Helpers.ContentContainer.slide("in");
        }
    });
});
modulejs.define("app/views/results", ['app/models/person'], function (PersonModel) {

    var rowView = Backbone.Marionette.ItemView.extend({
        template: false,
        tagName: "a",
        className: "collection-item",
        events: {
            "click": "itemClick"
        },

        initialize: function initialize() {
            this.$el.html(this.model.get("name")).prop("href", "#").attr("data-id", this.model.get("id"));
        },
        itemClick: function itemClick(e) {
            var $item = $(e.target);
            window.App.Modules.Helpers.ContentContainer.slide("out");
            this.seePersonDetails($item);
            this.makeItemActive($item);
            e.preventDefault();
        },
        seePersonDetails: function seePersonDetails($item) {
            var itemId = $item.attr("data-id");
            var Person = new PersonModel({ id: itemId });

            if (window.App.Modules.Cache.lastFetchedPersonId === itemId) return;
            window.App.Modules.Cache.lastFetchedPersonId = itemId;

            Backbone.Events.trigger("person:data:before:fetch");
            Person.fetch().then(function () {
                Backbone.Events.trigger("person:data:fetch", Person);
            });
        },
        makeItemActive: function makeItemActive($item) {
            $(".collection .collection-item").removeClass("active");
            $item.addClass("active");
        }
    });

    return Backgrid.Grid.extend({
        columns: [{
            name: "name",
            label: "Name",
            cell: rowView
        }],
        className: "backgrid collection"
    });
});
modulejs.define("app/views/search_filter", function () {

    return Backgrid.Extension.ClientSideFilter.extend({
        template: templates.get("search_filter.ejs"),
        className: "",

        // after clearing the searchbox, unfocus the field as well
        clearSearchBox: function clearSearchBox() {
            Backgrid.Extension.ClientSideFilter.prototype.clearSearchBox.call(this);
            this.searchBox().focusout();
            this.trigger("results:yes");
        },
        search: function search() {
            Backgrid.Extension.ClientSideFilter.prototype.search.call(this);
            var eventToTrigger = this.collection.length === 0 ? "results:no" : "results:yes";
            this.trigger(eventToTrigger);
        }
    });
});
modulejs.define("app/models/person", function () {

    var apiRootUrl = window.App.Modules.Config.apiRootUrl;
    return Backbone.Model.extend({
        urlRoot: apiRootUrl + "/people",

        parse: function parse(resp, options) {
            resp.id = window.App.Modules.Helpers.getIdFromUrl(resp.url);
            return resp;
        }
    });
});
modulejs.define("app/models/planet", function () {

    var apiRootUrl = window.App.Modules.Config.apiRootUrl;
    return Backbone.Model.extend({
        urlRoot: apiRootUrl + "/planets"
    });
});
modulejs.define("app/collections/people", ["app/models/person"], function (PersonModel) {

    var apiRootUrl = window.App.Modules.Config.apiRootUrl;
    return Backbone.Collection.extend({
        url: function url() {
            return apiRootUrl + "/people";
        },
        model: PersonModel,

        parse: function parse(resp, options) {
            this.meta = _.omit(resp, 'results');
            return resp.results;
        }
    });
});
modulejs.define("app/collections/planets", ["app/models/planet"], function (PlanetModel) {

    var apiRootUrl = window.App.Modules.Config.apiRootUrl;
    return Backbone.Collection.extend({
        url: function url() {
            return apiRootUrl + "/planets";
        },
        model: PlanetModel,

        parse: function parse(resp, options) {
            this.meta = _.omit(resp, 'results');
            return resp.results;
        }
    });
});

var swapp = Backbone.Marionette.Application.extend({
    regions: {
        results: "#results",
        filters: "#filters",
        content: "#swappContent",
        paginator: "#paginator"
    }
});

var controller = Backbone.Marionette.Object.extend({
    loaderView: modulejs.require('app/views/loader'),

    initialize: function initialize() {
        var peopleCollection = modulejs.require("app/collections/people");
        this.peopleCollection = new peopleCollection();
        this.bindEvents();
    },
    bindEvents: function bindEvents() {
        var _this7 = this;

        Backbone.Events.on("person:data:before:fetch", function () {
            Swapp.getRegion("content").show(new _this7.loaderView());
        });
    },
    bindResultsViewEvents: function bindResultsViewEvents() {
        var _this8 = this;

        var _this = this;
        Backbone.Events.on("person:data:fetch", function (PersonModel) {
            var PersonDataView = modulejs.require("app/views/person_data");
            Swapp.getRegion("content").show(new PersonDataView({ model: PersonModel }));
        });

        this.peopleCollection.on("page:change", function () {
            _this.SearchFilterView.clearSearchBox();
        });

        this.SearchFilterView.on("results:no", function () {
            _this8.Paginator.$el.hide();
            _this8.ResultsView.$el.find('thead').hide();
        });

        this.SearchFilterView.on("results:yes", function () {
            _this8.Paginator.$el.show();
            _this8.ResultsView.$el.find('thead').show();
        });
    },
    renderResultsLoader: function renderResultsLoader() {
        // this stuff could go in the initialize method of the view itself, but it takes too long to get there and the loader is visible only for few milliseconds
        Swapp.getRegion("results").show(new this.loaderView());
    },
    renderResults: function renderResults() {
        var _this9 = this;

        this.peopleCollection.fetch().then(function () {
            var resultsView = modulejs.require("app/views/results");
            _this9.ResultsView = new resultsView({
                collection: _this9.peopleCollection,
                emptyText: "No results found..."
            });
            Swapp.getRegion("results").show(_this9.ResultsView);
            _this9.renderPaginator();
            _this9.bindResultsViewEvents();
        });
    },
    renderFilters: function renderFilters() {
        var searchFilter = modulejs.require("app/views/search_filter");
        this.SearchFilterView = new searchFilter({
            collection: this.peopleCollection
        });
        Swapp.getRegion("filters").show(this.SearchFilterView);
    },
    renderPaginator: function renderPaginator() {
        var paginator = modulejs.require("app/views/pagination");
        this.Paginator = new paginator({
            collection: this.peopleCollection
        });
        Swapp.getRegion('paginator').show(this.Paginator);
    }
});

var Swapp = new swapp();
var Controller = new controller();

Swapp.addInitializer(function () {
    Controller.renderResultsLoader();
    Controller.renderResults();
    Controller.renderFilters();
});

Swapp.start();

$(document).ready(function () {
    $('select').material_select();
});